# search.py
# ---------
# Licensing Information: Please do not distribute or publish solutions to this
# project. You are free to use and extend these projects for educational
# purposes. The Pacman AI projects were developed at UC Berkeley, primarily by
# John DeNero (denero@cs.berkeley.edu) and Dan Klein (klein@cs.berkeley.edu).
# For more info, see http://inst.eecs.berkeley.edu/~cs188/sp09/pacman.html

"""
In search.py, you will implement generic search algorithms which are called
by Pacman agents (in searchAgents.py).
"""

import util


class SearchProblem:
    """
    This class outlines the structure of a search problem, but doesn't implement
    any of the methods (in object-oriented terminology: an abstract class).

    You do not need to change anything in this class, ever.
    """

    def getStartState(self):
        """
        Returns the start state for the search problem
        """
        util.raiseNotDefined()

    def isGoalState(self, state):
        """
          state: Search state

        Returns True if and only if the state is a valid goal state
        """
        util.raiseNotDefined()

    def getSuccessors(self, state):
        """
          state: Search state

        For a given state, this should return a list of triples,
        (successor, action, stepCost), where 'successor' is a
        successor to the current state, 'action' is the action
        required to get there, and 'stepCost' is the incremental
        cost of expanding to that successor
        """
        util.raiseNotDefined()

    def getCostOfActions(self, actions):
        """
         actions: A list of actions to take

        This method returns the total cost of a particular sequence of actions.  The sequence must
        be composed of legal moves
        """
        util.raiseNotDefined()


def tinyMazeSearch(problem):
    """
    Returns a sequence of moves that solves tinyMaze.  For any other
    maze, the sequence of moves will be incorrect, so only use this for tinyMaze
    """
    from game import Directions
    s = Directions.SOUTH
    w = Directions.WEST
    return [s, s, w, s, w, w, s, w]


def depthFirstSearch(problem):
    """
    Search the deepest nodes in the search tree first [p 85].

    Your search algorithm needs to return a list of actions that reaches
    the goal.  Make sure to implement a graph search algorithm [Fig. 3.7].

    To get started, you might want to try some of these simple commands to
    understand the search problem that is being passed in:

    print( "Start:", problem.getStartState() )
    print( "Is the start a goal?", problem.isGoalState(problem.getStartState()) )
    print( "Start's successors:", problem.getSuccessors(problem.getStartState()) )
    """
    "*** YOUR CODE HERE ***"
    util.raiseNotDefined()


def breadthFirstSearch(problem):
    Queue = util.Queue()
    memory = []
    start = (problem.getStartState(), None, [])
    Queue.push(start)

    while not Queue.isEmpty():
        location, direction, path = Queue.pop()
        if (location not in memory):
            memory.append(location)
            if (problem.isGoalState(location)):
                return path
            successors = list(problem.getSuccessors(location))
            for coordinates, action, steps in successors:
                if coordinates not in memory:
                    Queue.push((coordinates, action, path + [action]))

    return []

    util.raiseNotDefined()


def uniformCostSearch(problem):
    "Search the node of least total cost first. "
    queue = util.PriorityQueue()
    queue.push((problem.getStartState(), [], []), 0)

    while not queue.isEmpty():
        current, actions, visited = queue.pop()
        if current not in visited:
            if problem.isGoalState(current):
                return actions
            for coordinates, action, steps in problem.getSuccessors(current):
                queue.push((coordinates, actions + [action], visited + [current]),
                           problem.getCostOfActions(actions + [action]))
    return []


    util.raiseNotDefined()


def nullHeuristic(state, problem=None):
    """
    A heuristic function estimates the cost from the current state to the nearest
    goal in the provided SearchProblem.  This heuristic is trivial.
    """
    return 0


def aStarSearch(problem, heuristic=nullHeuristic):
    "Search the node that has the lowest combined cost and heuristic first."

    heuristics = heuristic(problem.getStartState(), problem)
    value = 0
    newvalue = value + heuristics

    PriorityQueue = util.PriorityQueue()
    memory = []
    start = (problem.getStartState(), None, value, []);
    PriorityQueue.push(start, newvalue)

    while not PriorityQueue.isEmpty():
        location, direction, cost, path = PriorityQueue.pop()

        if location not in memory:
            memory.append(location)
            successors = list(problem.getSuccessors(location))
            for i in successors:
                if i[0] not in memory:
                    if (problem.isGoalState(i[0])):
                        return path + [i[1]]
                    heuristics = heuristic(i[0], problem)
                    value = cost + i[2]
                    newvalue = value + heuristics
                    next = (i[0], i[1], value, path + [i[1]])
                    PriorityQueue.push(next, newvalue)

    return []

    util.raiseNotDefined()


"Bonus assignment: Adjust the getSuccessors() method in CrossroadSearchAgent class"
"in searchAgents.py and test with:"
"python pacman.py -l bigMaze -z .5 -p CrossroadSearchAgent -a fn=astar,heuristic=manhattanHeuristic "  # Abbreviations
bfs = breadthFirstSearch
dfs = depthFirstSearch
astar = aStarSearch
ucs = uniformCostSearch
